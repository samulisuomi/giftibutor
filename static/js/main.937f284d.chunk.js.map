{"version":3,"sources":["NameRow.js","NameForm.js","App.js","serviceWorker.js","index.js"],"names":["NameRow","person","this","props","react_default","a","createElement","className","name","PureComponent","NameForm","state","people","handleNameChange","event","_this","setState","target","value","handleSubmit","preventDefault","_this$state","Object","toConsumableArray","concat","trim","giftee","renderPeople","length","map","src_NameRow","isAddDisabled","_this$state2","trimmedName","some","noValidate","onSubmit","TextField_default","label","onChange","margin","Button_default","children","variant","color","disabled","type","theme","createMuiTheme","palette","primary","main","secondary","amber","App","styles","BrowserRouter","Route","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTAceA,mLAXJ,IACCC,EAAWC,KAAKC,MAAhBF,OAER,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,SAAKL,EAAOO,cANEC,iBCuFPC,6MAhFbC,MAAQ,CACNH,KAAM,GACNI,OAAQ,MAGVC,iBAAmB,SAAAC,GACjBC,EAAKC,SAAS,CACZR,KAAMM,EAAMG,OAAOC,WAIvBC,aAAe,SAAAL,GACbA,EAAMM,iBADgB,IAAAC,EAGGN,EAAKJ,MAAtBC,EAHcS,EAGdT,OAAQJ,EAHMa,EAGNb,KAEhBO,EAAKC,SAAS,CACZR,KAAM,GACNI,OAAOU,OAAAC,EAAA,EAAAD,CAAMV,GAAPY,OAAA,CAAe,CACnBhB,KAAMA,EAAKiB,OACXC,OAAQ,aAKdC,aAAe,WAAM,IACXf,EAAWG,EAAKJ,MAAhBC,OAER,OAAKA,EAAOgB,OAQLhB,EAAOiB,IAAI,SAAA5B,GAAM,OACtBG,EAAAC,EAAAC,cAACwB,EAAD,CACE7B,OAASA,MARTG,EAAAC,EAAAC,cAAA,mEAaNyB,cAAgB,WAAM,IAAAC,EACKjB,EAAKJ,MAAtBH,EADYwB,EACZxB,KAAMI,EADMoB,EACNpB,OAERqB,EAAczB,EAAKiB,OAEzB,OAAQjB,EAAKoB,QAAUhB,EAAOsB,KAAK,SAAAjC,GAAM,OAAIA,EAAOO,OAASyB,6EAGtD,IACCzB,EAASN,KAAKS,MAAdH,KAER,OACEJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXL,KAAKyB,eACPvB,EAAAC,EAAAC,cAAA,QACE6B,YAAU,EACVC,SAAWlC,KAAKiB,cAEhBf,EAAAC,EAAAC,cAAC+B,EAAAhC,EAAD,CACEiC,MAAM,OACNpB,MAAQV,EACR+B,SAAWrC,KAAKW,iBAChB2B,OAAO,WAETpC,EAAAC,EAAAC,cAACmC,EAAApC,EAAD,CACEqC,SAAS,MACTC,QAAQ,YACRC,MAAM,UACNC,SAAW3C,KAAK6B,gBAChBe,KAAK,oBAzEMrC,iBCCjBsC,EAAQC,yBAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAWC,OA0BAC,mLApBX,OACElD,EAAAC,EAAAC,cAACiD,EAAA,iBAAD,CAAkBR,MAAOA,GACvB3C,EAAAC,EAAAC,cAACkD,EAAA,EAAD,KACEpD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,8BAIFF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YACdH,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWlD,IACjCN,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAOC,KAAK,UAAUC,OAAK,EAACC,UAAW,kBAAOxD,EAAAC,EAAAC,cAAA,kCAb1CG,iBCNEoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.937f284d.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\n\nclass NameRow extends PureComponent {\n  render() {\n    const { person } = this.props;\n\n    return (\n      <div className=\"NameRow\">\n        <p>{ person.name }</p>\n      </div>\n    );\n  }\n}\n\nexport default NameRow;\n","import React, { PureComponent } from 'react';\nimport './NameForm.css'\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\nimport NameRow from './NameRow'\n\nclass NameForm extends PureComponent {\n  state = {\n    name: '',\n    people: []\n  }\n\n  handleNameChange = event => {\n    this.setState({\n      name: event.target.value\n    });\n  }\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const { people, name } = this.state;\n\n    this.setState({\n      name: '',\n      people: [ ...people, {\n        name: name.trim(),\n        giftee: null\n      }]\n    });\n  }\n\n  renderPeople = () => {\n    const { people } = this.state;\n\n    if (!people.length) {\n      return (\n        <span>\n          No people yet! Add a few using this ðŸ‘‡\n        </span>\n      )\n    }\n\n    return people.map(person => (\n      <NameRow\n        person={ person }\n      />\n    ));\n  }\n\n  isAddDisabled = () => {\n    const { name, people } = this.state;\n\n    const trimmedName = name.trim()\n\n    return !name.length || people.some(person => person.name === trimmedName)\n  }\n\n  render() {\n    const { name } = this.state;\n\n    return (\n      <div className=\"NameForm\">\n        { this.renderPeople() }\n        <form\n          noValidate\n          onSubmit={ this.handleSubmit }\n        >\n          <TextField\n            label=\"Name\"\n            value={ name }\n            onChange={ this.handleNameChange }\n            margin=\"normal\"\n          />\n          <Button\n            children=\"Add\"\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={ this.isAddDisabled() }\n            type=\"submit\"\n          />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default NameForm;\n","import React, { PureComponent } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './App.css';\n\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport amber from '@material-ui/core/colors/amber';\n\nimport NameForm from './NameForm'\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#81c784',\n    },\n    secondary: amber\n  }\n});\n\nclass App extends PureComponent {\n  render() {\n    return (\n      <MuiThemeProvider theme={theme}>\n        <Router>\n          <div className=\"App\">\n            <header className=\"App-header\">\n              <h1>\n                Giftibutor v0.1\n              </h1>\n            </header>\n            <main className=\"App-main\">\n              <Route path=\"/\" exact component={NameForm} />\n              <Route path=\"/giftee\" exact component={() => (<span>TODO</span>)} />\n            </main>\n          </div>\n        </Router>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}